package main

import (
	"fmt"
	"sort"
)

type MedianFinder struct {
	lh []int
	hh []int
	n  int
}

func bigger(i, j int) bool {
	return i > j
}

func smaller(i, j int) bool {
	return i < j
}

func down(heap []int, index int, bigger func(int, int) bool) {
	left := 2*index + 1
	right := 2*index + 2
	max := index

	if left < len(heap) && bigger(heap[left], heap[max]) {
		max = left
	}
	if right < len(heap) && bigger(heap[right], heap[max]) {
		max = right
	}
	if max != index {
		heap[index], heap[max] = heap[max], heap[index]
		down(heap, max, bigger)
	}
}

func up(heap []int, index int, bigger func(int, int) bool) {
	parent := (index - 1) / 2
	if parent >= 0 && bigger(heap[index], heap[parent]) {
		heap[index], heap[parent] = heap[parent], heap[index]
		up(heap, parent, bigger)
	}
}

func Constructor() MedianFinder {
	return MedianFinder{lh: []int{}, hh: []int{}, n: 0}
}

func (this *MedianFinder) AddNum(num int) {
	this.lh = append(this.lh, num)
	up(this.lh, len(this.lh)-1, bigger)

	this.hh = append(this.hh, this.lh[0])
	up(this.hh, len(this.hh)-1, smaller)

	this.lh[0] = this.lh[len(this.lh)-1]
	this.lh = this.lh[:len(this.lh)-1]
	down(this.lh, 0, bigger)

	if len(this.lh) < len(this.hh) {
		this.lh = append(this.lh, this.hh[0])
		up(this.lh, len(this.lh)-1, bigger)

		this.hh[0] = this.hh[len(this.hh)-1]
		this.hh = this.hh[:len(this.hh)-1]
		down(this.hh, 0, smaller)
	}
	this.n++
}

func (this *MedianFinder) FindMedian() float64 {
	if this.n%2 == 0 {
		return float64(this.lh[0]+this.hh[0]) / 2
	} else {
		return float64(this.lh[0])
	}
}

func main() {
	obj := Constructor()
	input := []int{18, 251, 158, 158, 529, 180, 134, 529, 240, 435, 435, 316, 350, 537, 490, 198, 359, 493, 585, 614, 21, 583, 106, 549, 271, 174, 430, 222, 117, 159, 206, 100, 496, 129, 550, 411, 216, 271, 98, 119, 232, 629, 101, 218, 53, 468, 447, 402, 603, 584, 306, 269, 623, 88, 79, 521, 261, 544, 628, 121, 278, 132, 105, 72, 459, 408, 111, 291, 437, 7, 276, 34, 16, 254, 177, 550, 632, 464, 191, 167, 158, 331, 187, 123, 274, 321, 182, 93, 277, 595, 459, 349, 80, 195, 195, 214, 14, 384, 68, 427, 84, 609, 283, 59, 234, 327, 330, 509, 568, 65, 442, 380, 321, 589, 603, 64, 486, 175, 204, 421, 381, 209, 578, 580, 294, 287, 518, 261, 619, 155, 636, 287, 250, 209, 586, 299, 589, 65, 34, 216, 507, 380, 127, 186, 135, 533, 272, 563, 249, 350, 516, 229, 307, 127, 306, 195, 537, 269, 485, 446, 206, 222, 515, 240, 266, 417, 472, 140, 185, 439, 592, 283, 273, 188, 230, 195, 217, 321, 246, 563, 113, 411, 290, 351, 221, 76, 399, 19, 142, 544, 47, 270, 614, 36, 538, 179, 370, 387, 513, 570, 546, 347, 181, 257, 182, 412, 588, 66, 276, 381, 94, 461, 570, 550, 432, 192, 153, 382, 568, 233, 375, 186, 469, 402, 266, 143, 146, 44, 512, 540, 297, 520, 545, 436, 412, 597, 535, 13, 12, 109, 128, 84, 619, 85, 203, 478, 367, 77, 485, 640, 415, 533, 628, 338, 542, 560, 11, 80, 277, 148, 113, 23, 246, 453, 221, 310, 486, 262, 87, 330, 390, 199, 451, 540, 283, 466, 37, 639, 515, 319, 520, 289, 620, 470, 216, 249, 229, 130, 134, 637, 350, 605, 481, 220, 373, 60, 100, 205, 270, 305, 166, 525, 373, 627, 607, 111, 91, 491, 143, 353, 549, 434, 182, 386, 33, 540, 364, 456, 635, 317, 637, 0, 310, 559, 591, 8, 243, 331, 222, 117, 396, 163, 568, 309, 176, 61, 560, 102, 614, 586, 569, 261, 436, 45, 606, 549, 170, 123, 249, 296, 291, 486, 158, 300, 603, 371, 170, 498, 378, 480, 62, 586, 317, 502, 563, 399, 266, 93, 231, 22, 531, 245, 599, 189, 297, 637, 233, 237, 345, 387, 379, 419, 212, 323, 96, 64, 59, 144, 369, 252, 442, 597, 494, 438, 100, 157, 184, 478, 497, 107, 39, 263, 239, 143, 134, 224, 498, 79, 254, 240, 28, 533, 484, 389, 89, 621, 151, 313, 28, 274, 105, 601, 265, 548, 401, 254, 539, 113, 118, 165, 77, 478, 534, 65, 165, 580, 380, 83, 455, 506, 336, 445, 398, 384, 389, 209, 207, 537, 383, 176, 92, 478, 455, 503, 526, 623, 260, 522, 326, 335, 336, 221, 119, 426, 561, 301, 168, 377, 75, 615, 390, 88, 29, 343, 572, 608, 358, 91, 534, 336, 395, 580, 478, 448, 305, 640, 339, 139, 526, 592, 542, 215, 7, 168, 39, 622, 386, 81, 314, 599, 77, 400, 359, 622, 147, 203, 487, 612, 111, 413, 487, 95, 469, 475, 6, 9, 437, 502, 488, 77, 424, 625, 223, 102, 371, 408, 389, 312, 134, 77, 629, 318, 12, 533, 309, 575, 616, 62, 303, 85, 36, 20, 447, 388, 463, 543, 439, 204, 479, 9, 598, 437, 9, 480, 580, 450, 318, 521, 466, 214, 236, 44, 345, 276, 227, 378, 83, 562, 45, 514, 260, 370, 562, 352, 164, 450, 418, 114, 41, 169, 577, 412, 239, 75, 633, 439, 371, 566, 507, 214, 435, 39, 86, 215, 239, 621, 39, 377, 297, 156, 607, 342, 18, 374, 359, 560, 98, 343, 287, 418, 371, 308, 349, 607, 470, 568, 14, 302, 605, 635, 543, 471, 241, 519, 169, 381, 344, 159, 164, 624, 93, 123, 474, 184, 296, 619, 179, 194, 468, 245, 0}
	for i := 0; i < len(input); i++ {
		obj.AddNum(input[i])

		if len(obj.lh) < 1 || len(obj.hh) < 1 {
			continue
		}

		maxSmaller := obj.lh[0]
		minBigger := obj.hh[0]
		lh := append([]int(nil), obj.lh...)
		sort.Sort(sort.Reverse(sort.IntSlice(lh)))
		hh := append([]int(nil), obj.hh...)
		sort.Ints(hh)
		if lh[0] != maxSmaller || hh[0] != minBigger {
			fmt.Println(input[i])
			fmt.Println(lh[0], maxSmaller)
			fmt.Println(hh[0], minBigger)
			fmt.Println(obj.lh)
			fmt.Println(obj.hh)
			break
		}
	}
}
